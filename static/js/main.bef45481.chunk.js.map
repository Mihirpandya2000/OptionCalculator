{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","width","App","useState","strikeprice","setStrikePrice","spotprice","setSpotPrice","optionprice","setOptionPrice","chips","setChips","hava","setHava","React","type","setType","console","log","classes","className","FormControl","formControl","Select","value","onChange","event","target","displayEmpty","selectEmpty","inputProps","MenuItem","FormHelperText","noValidate","autoComplete","TextField","id","label","Button","variant","color","onClick","intrensicvalue","parseInt","timevalue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAWMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,aA4FEC,MAxFf,WAAgB,IAAD,EACqBC,mBAAS,GAD9B,mBACPC,EADO,KACKC,EADL,OAEiBF,mBAAS,GAF1B,mBAEPG,EAFO,KAEGC,EAFH,OAGqBJ,mBAAS,GAH9B,mBAGPK,EAHO,KAGKC,EAHL,OAISN,mBAAS,GAJlB,mBAIPO,EAJO,KAIDC,EAJC,OAKOR,mBAAS,GALhB,mBAKPS,EALO,KAKFC,EALE,OAMUC,IAAMX,SAAS,MANzB,mBAMPY,EANO,KAMDC,EANC,KAOdC,QAAQC,IAAIH,GACX,IAAMI,EAAUxB,IAgDhB,OACE,sBAAKyB,UAAU,MAAf,UACA,4EACA,eAACC,EAAA,EAAD,CAAaD,UAAWD,EAAQG,YAAhC,UACA,eAACC,EAAA,EAAD,CACEC,MAAOT,EACPU,SATqB,SAACC,GACxBV,EAAQU,EAAMC,OAAOH,QASnBI,cAAY,EACZR,UAAWD,EAAQU,YACnBC,WAAY,CAAE,aAAc,YAL9B,UAQE,cAACC,EAAA,EAAD,CAAUP,MAAO,GAAjB,gBACA,cAACO,EAAA,EAAD,CAAUP,MAAO,GAAjB,mBAGF,cAACQ,EAAA,EAAD,0BAEA,uBAAMZ,UAAWD,EAAQrB,KAAMmC,YAAU,EAACC,aAAa,MAAvD,UACA,cAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBrB,KAAK,SAASsB,MAAM,aAAaZ,SA9D3C,SAACC,GACtBnB,EAAamB,EAAMC,OAAOH,UA8DxB,cAACW,EAAA,EAAD,CAAWC,GAAG,iBAAiBrB,KAAK,SAASsB,MAAM,eAAeZ,SAnE7C,SAACC,GACxBrB,EAAeqB,EAAMC,OAAOH,UAoE1B,cAACW,EAAA,EAAD,CAAWC,GAAG,iBAAiBrB,KAAK,SAASsB,MAAM,eAAeZ,SA9D7C,SAACC,GACxBjB,EAAeiB,EAAMC,OAAOH,aAgE5B,cAACc,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,QA9DhC,WAElB,GAAS,IAAN1B,EAED,GAAGT,GAAWF,EAAY,CACxB,IAAIsC,EAAgBC,SAASrC,GAAWqC,SAASvC,GACjDO,EAAS+B,GACT,IAAIE,EAAWD,SAASvC,GAAauC,SAASnC,GAAcmC,SAASrC,GACrEO,EAAQ+B,QAGRjC,EAAS,GACTE,EAAQL,QAMV,GAAGJ,GAAaE,EAAU,CACpBoC,EAAgBC,SAASvC,GAAauC,SAASrC,GACnDK,EAAS+B,GACLE,EAAWD,SAASrC,GAAWqC,SAASnC,GAAcmC,SAASvC,GACnES,EAAQ+B,QAGRjC,EAAS,GACTE,EAAQL,IAoCR,uBACA,2DAA8BE,KAC9B,qDAAwBE,SC1FbiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bef45481.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {useState} from \"react\";\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\nfunction App() {\n const [strikeprice,setStrikePrice]=useState(0);\n const [spotprice,setSpotPrice]=useState(0);\n const [optionprice,setOptionPrice]=useState(0);\n const [chips,setChips]=useState(0);\n const [hava,setHava]=useState(0);\n const [type, setType] = React.useState(\"CE\");\n console.log(type);\n  const classes = useStyles();\n  const handlestrikechange=(event)=>{\n    setStrikePrice(event.target.value);\n    \n  }\n  const handlespotchange=(event)=>{\n    setSpotPrice(event.target.value);\n  }\n  const handleoptionchange=(event)=>{\n    setOptionPrice(event.target.value);\n  }\n  const calculate=()=>{\n\nif(type==10){\n  \n  if(spotprice>=strikeprice){\n    var intrensicvalue=(parseInt(spotprice)-parseInt(strikeprice));\n    setChips(intrensicvalue);\n    var timevalue=(parseInt(strikeprice)+parseInt(optionprice))-parseInt(spotprice);\n    setHava(timevalue);\n  }\n  else{\n    setChips(0);\n    setHava(optionprice);\n  }\n  \n  \n}\nelse{\n  if(strikeprice>=spotprice){\n    var intrensicvalue=(parseInt(strikeprice)-parseInt(spotprice));\n    setChips(intrensicvalue);\n    var timevalue=(parseInt(spotprice)+parseInt(optionprice))-parseInt(strikeprice);\n    setHava(timevalue);\n  }\n  else{\n    setChips(0);\n    setHava(optionprice);\n  }\n}\n\n\n\n  \n  }\n  const handleTypeChange = (event) => {\n    setType(event.target.value);\n  };\n  return (\n    <div className=\"App\">\n    <h1>Option Intrensic And Time Value Calculator</h1>\n    <FormControl className={classes.formControl}>\n    <Select\n      value={type}\n      onChange={handleTypeChange}\n      displayEmpty\n      className={classes.selectEmpty}\n      inputProps={{ 'aria-label': 'CE or PE' }}\n    >\n      \n      <MenuItem value={10}>CE</MenuItem>\n      <MenuItem value={20}>PE</MenuItem>\n      \n    </Select>\n    <FormHelperText>CE or PE</FormHelperText>\n  </FormControl>\n    <form className={classes.root} noValidate autoComplete=\"off\">\n    <TextField id=\"standard-basic\" type=\"number\" label=\"Spot Price\" onChange={handlespotchange}/>\n      <TextField id=\"standard-basic\" type=\"number\" label=\"Strike Price\" onChange={handlestrikechange} />\n  \n      <TextField id=\"standard-basic\" type=\"number\" label=\"Option Price\" onChange={handleoptionchange}/>\n     \n    </form>\n    <Button variant=\"contained\" color=\"secondary\" onClick={calculate}>Calculate</Button>\n    <h3>Intrensic Value(chips):- {chips}</h3>\n    <h3>Time Value(Hava):- {hava}</h3>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}